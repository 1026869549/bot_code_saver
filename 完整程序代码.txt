.版本 2
.支持库 spec

.程序集 CQ应用

.子程序 _启动子程序, 整数型, , //请不要在本子程序添加其他代码

_临时子程序 ()
' 【不要】在本子程序处理其他任何代码，以免发生异常情况。如需执行初始化代码请在Startup事件中执行（Type=1001）。
返回 (0)

.子程序 _临时子程序

' 本函数仅在易语言调试时会被运行。
' 可以在这里执行一些测试命令，便于应用测试。

.子程序 AppInfo, 文本型, 公开, [请填写] 应用的ApiVer、Appid //请不要在本子程序添加其他代码
.局部变量 ApiVer, 整数型
.局部变量 AppID, 文本型

ApiVer ＝ 9  ' Api版本号
AppID ＝ “loriconqiao.cqp.me”  ' AppID，规则见 https://cqp.im/v9/appid
' 【不要】在本子程序处理其他任何代码，以免发生异常情况。如需执行初始化代码请在Startup事件中执行（Type=1001）。
返回 (到文本 (ApiVer) ＋ “,” ＋ AppID)

.子程序 Initialize, 整数型, 公开, 应用AuthCode接收 //请勿修改本子程序
.参数 AuthCode, 整数型
.局部变量 AuthRet, 整数型

' 酷Q获取应用信息后，如果接受该应用，将会调用这个子程序并传递AuthCode。
AuthRet ＝ CQ.其他_置AuthCode (AuthCode)
.如果真 (AuthRet ≠ 0)
    返回 (AuthRet)
.如果真结束
置错误提示管理 (&CQ_错误提示管理)  ' 将易语言的错误转向酷Q，便于定位错误应用
' 请勿修改本子程序，【不要】在本子程序处理其他任何代码，以免产生异常情况。如需执行初始化代码请在Startup事件中执行（Type=1001）。
返回 (0)

.子程序 _eventStartup, 整数型, 公开, Type=1001 酷Q启动

' 本子程序会在酷Q【主线程】中被调用。
' 每次启动酷Q后，应用启用并被加载时，本子程序将被调用，请在这里执行应用初始化代码。
' 请务必尽快返回本子程序，否则会卡住其他应用以及主程序的加载。

应用目录 ＝ CQ.取应用目录 ()  ' 获取应用数据目录(无需储存数据时，请将此行注释)
' 返回如：D:\CoolQ\data\app\com.example.demo\
' 应用的所有数据、配置【必须】存放于此目录，避免给用户带来困扰。

返回 (0)  ' 请固定返回0

.子程序 _eventExit, 整数型, 公开, Type=1002 酷Q退出

' 本子程序会在酷Q【主线程】中被调用。
' 无论本应用是否被启用，本函数都会在酷Q退出前执行一次，请在这里执行插件关闭代码。


返回 (0)  ' 请固定返回0，返回后酷Q将很快关闭，请不要再通过线程等方式执行其他代码。

.子程序 _eventEnable, 整数型, 公开, Type=1003 应用已被启用

' 当应用被启用后，将收到此事件。
' 如果酷Q载入时应用已被启用，则在_eventStartup(Type=1001,酷Q启动)被调用后，本函数也将被调用一次。
' 如非必要，不建议在这里加载窗口。（可以添加菜单，让用户手动打开窗口）
应用已启用 ＝ 真
等待确认 ＝ 假
YorN ＝ 假

返回 (0)  ' 请固定返回0。

.子程序 _eventDisable, 整数型, 公开, Type=1004 应用将被停用

' 当应用被停用前，将收到此事件。
' 如果酷Q载入时应用已被停用，则本函数【不会】被调用。
' 无论本应用是否被启用，酷Q关闭前本函数都【不会】被调用。
应用已启用 ＝ 假


返回 (0)  ' 请固定返回0。

.子程序 _eventPrivateMsg, 整数型, 公开, Type=21 私聊消息
.参数 subType, 整数型, , 子类型，11/来自好友 1/来自在线状态 2/来自群 3/来自讨论组
.参数 msgId, 整数型, , 消息ID
.参数 fromAccount, 长整数型, , 来源帐号
.参数 msg, 文本型, , 消息内容
.参数 font, 整数型, , 字体
.局部变量 分割后文本, 文本型, , "0"
.局部变量 临时数组, 文本型, , "0"
.局部变量 文本的内容, 文本型
.局部变量 文件号1, 整数型
.局部变量 有状态参数, 逻辑型
.局部变量 临时id数组, 数_群, , "0"
.局部变量 临时文本, 文本型
.局部变量 确认文本, 文本型, , "0"
.局部变量 o, 整数型

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。

' ’CQ.发送私聊消息 (fromAccount, CQ.CQ码_At (fromAccount) ＋ “你发送了消息：” ＋ msg)

' 如果要回复消息，请调用 api 发送，则 返回(#消息_拦截) - 拦截本条消息，不再由其他应用继续处理 //注意：应用优先级设置为"最高"(10000)时，无法使用本返回值
' 如果不回复消息，交由之后的应用处理，则 返回(#消息_忽略) - 忽略本条消息
' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。

' CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “你发送了消息：” ＋ msg)

分割后文本 ＝ 分割文本 (msg, “：”, )
.如果 (分割后文本 [1] ＝ “下载提取工具”)
    CQ.发送私聊消息 (fromAccount, “https://github.com/1026869549/tr_data/tree/master”)
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (等待确认)
    确认文本 ＝ 分割文本 (分割后文本 [1], “ ”, )
    CQ.取群列表 (临时id数组)
    临时文本 ＝ “”
    .计次循环首 (取数组成员数 (临时id数组), o)
        .如果 (确认文本 [o] ≠ “N”)
            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ “—完成” ＋ #换行符
            CQ.发送群消息 (临时id数组 [o].群号, 待输出文本)
        .否则

            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ “—已忽略” ＋ #换行符
        .如果结束

    .计次循环尾 ()
    CQ.发送私聊消息 (fromAccount, 临时文本)
    临时文本 ＝ “”
    等待确认 ＝ 假
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (YorN)
    .如果 (分割后文本 [1] ＝ “Y”)
        CQ.取群列表 (临时id数组)
        临时文本 ＝ “”
        .计次循环首 (取数组成员数 (临时id数组), o)
            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ #换行符
        .计次循环尾 ()
        CQ.发送私聊消息 (fromAccount, 临时文本)
        临时文本 ＝ “”
        等待确认 ＝ 真
    .否则

        确认文本 ＝ 分割文本 (分割后文本 [1], “ ”, )
        CQ.取群列表 (临时id数组)
        临时文本 ＝ “”
        .计次循环首 (取数组成员数 (临时id数组), o)
            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ “—完成” ＋ #换行符
            CQ.发送群消息 (临时id数组 [o].群号, 待输出文本)
        .计次循环尾 ()
        CQ.发送私聊消息 (fromAccount, 临时文本)
        临时文本 ＝ “”
    .如果结束

    YorN ＝ 假
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “广播群文本”)
    待输出文本 ＝ 分割后文本 [2]
    CQ.发送私聊消息 (fromAccount, “是否人工确认？（Y/N）”)
    YorN ＝ 真
    反馈 (msg, fromAccount)
.否则

.如果结束
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘

.如果 (分割后文本 [1] ＝ “发送”)
    CQ.发送私聊消息 (到数值 (分割后文本 [2]), 分割后文本 [3])
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “下载” 或 分割后文本 [1] ＝ “显示当前天数” 或 分割后文本 [1] ＝ “提取文本”)
    临时数组 ＝ 分割后文本
    删除成员 (分割后文本, 1, 取数组成员数 (分割后文本))
    加入成员 (分割后文本, “提取单词”)

    .计次循环首 (取数组成员数 (临时数组), o)
        加入成员 (分割后文本, 临时数组 [o])
    .计次循环尾 ()
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “算数” 或 分割后文本 [1] ＝ “arith” 或 分割后文本 [1] ＝ “香浓” 或 分割后文本 [1] ＝ “shannon” 或 分割后文本 [1] ＝ “哈夫曼” 或 分割后文本 [1] ＝ “huffman” 或 分割后文本 [1] ＝ “词典” 或 分割后文本 [1] ＝ “lzw”)
    临时数组 ＝ 分割后文本
    删除成员 (分割后文本, 1, 取数组成员数 (分割后文本))

    加入成员 (分割后文本, “编码计算”)
    .计次循环首 (取数组成员数 (临时数组), o)
        加入成员 (分割后文本, 临时数组 [o])
    .计次循环尾 ()
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “帮助”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)
        .如果 (分割后文本 [2] ＝ “服务器”)
            CQ.发送私聊消息 (fromAccount, #帮助1)
        .否则

            .如果 (分割后文本 [2] ＝ “提取单词”)
                CQ.发送私聊消息 (fromAccount, #帮助2)
            .否则

                .如果 (分割后文本 [2] ＝ “编码计算”)
                    CQ.发送私聊消息 (fromAccount, #帮助3)
                .否则

                    CQ.发送私聊消息 (fromAccount, #帮助文本)
                .如果结束

            .如果结束

        .如果结束

    .否则

        CQ.发送群消息 (fromAccount, #帮助文本)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “服务器”)
    CQ.发送私聊消息 (fromAccount, “#服务器指令，请在群内发送”)
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “提取单词”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)
        .如果 (分割后文本 [2] ＝ “下载”)
            CQ.发送私聊消息 (fromAccount, “https://github.com/1026869549/tr_data/blob/master/%E8%AF%8D%E5%BA%93.xlsx”)  ' “发送指令成功，正在等待数据返回。（默认5秒后回传数据）”
        .否则

            ' CQ.发送群消息 (fromGroup,  “发送指令成功。”)
        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “显示当前天数”)
            CQ.发送私聊消息 (fromAccount, “当前共有 ” ＋ 取天数 () ＋ “ 个词库，分别对应张老师的外教课天数”)  ' “发送指令成功，正在等待数据返回。（默认5秒后回传数据）”
        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “提取文本”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (分割后文本 [3] ＝ “全部” 或 分割后文本 [3] ＝ “all”)
                    CQ.发送私聊消息 (fromAccount, 提取文本 (“all”))
                .否则

                    .如果 (到数值 (文本区分_只取数字 (分割后文本 [3])) ＞ 0 且 到数值 (文本区分_只取数字 (分割后文本 [3])) ≤ 到数值 (取天数 ()))
                        CQ.发送私聊消息 (fromAccount, 提取文本 (文本区分_只取数字 (分割后文本 [3])))
                    .否则

                        CQ.发送私聊消息 (fromAccount, “参数超出范围 all 或 1-” ＋ 取天数 ())
                    .如果结束

                .如果结束

            .否则

                CQ.发送私聊消息 (fromAccount, 提取文本 (“all”))
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ≠ “下载” 且 分割后文本 [2] ≠ “显示当前天数” 且 分割后文本 [2] ≠ “提取文本”)
            CQ.发送私聊消息 (fromAccount, #帮助2)
        .否则

        .如果结束

    .否则

        CQ.发送私聊消息 (fromAccount, #帮助2)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “编码计算”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)

        .如果 (分割后文本 [2] ＝ “算数” 或 分割后文本 [2] ＝ “arith”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                CQ.发送私聊消息 (fromAccount, #换行符 ＋ 算数运算 (分割后文本 [3]))
            .否则

                CQ.发送私聊消息 (fromAccount, “错误：缺少input字符串” ＋ #换行符 ＋ “算数或arith：[字符串]”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “香浓” 或 分割后文本 [2] ＝ “shannon”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (取数组成员数 (分割后文本) ＞ 3)
                    CQ.发送私聊消息 (fromAccount, 香浓运算 (分割后文本 [3], 分割后文本 [4]))
                .否则

                    CQ.发送私聊消息 (fromAccount, “错误：缺少[概率]” ＋ #换行符 ＋ “香浓或shannon：[字符]：[概率]”)
                .如果结束

            .否则

                CQ.发送私聊消息 (fromAccount, “错误：缺少[字符]” ＋ #换行符 ＋ “香浓或shannon：[字符]：[概率]”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “哈夫曼” 或 分割后文本 [2] ＝ “huffman”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (取数组成员数 (分割后文本) ＞ 3)
                    .如果 (取数组成员数 (分割后文本) ＞ 4)
                        CQ.发送私聊消息 (fromAccount, #换行符 ＋ 哈夫曼运算 (分割后文本 [3], 分割后文本 [4], 分割后文本 [5]))
                    .否则

                        CQ.发送私聊消息 (fromAccount, “错误：缺少[二进制码]” ＋ #换行符 ＋ “哈夫曼或huffman：[字符]：[概率]：[二进制码]”)
                    .如果结束

                .否则

                    CQ.发送私聊消息 (fromAccount, “错误：缺少[概率]” ＋ #换行符 ＋ “哈夫曼或huffman：[字符]：[概率]：[二进制码]”)
                .如果结束


            .否则

                CQ.发送私聊消息 (fromAccount, “错误：缺少[字符]” ＋ #换行符 ＋ “哈夫曼或huffman：[字符]：[概率]：[二进制码]”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘
        .如果 (分割后文本 [2] ＝ “词典” 或 分割后文本 [2] ＝ “lzw”)
            CQ.发送私聊消息 (fromAccount, “存在bug,暂未开放”)
        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ≠ “算数” 且 分割后文本 [2] ≠ “arith” 且 分割后文本 [2] ≠ “香浓” 且 分割后文本 [2] ≠ “shannon” 且 分割后文本 [2] ≠ “哈夫曼” 且 分割后文本 [2] ≠ “huffman” 且 分割后文本 [2] ≠ “词典” 且 分割后文本 [2] ≠ “lzw”)
            CQ.发送私聊消息 (fromAccount, #帮助3)
        .否则

        .如果结束

    .否则

        CQ.发送私聊消息 (fromAccount, #帮助3)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束

返回 (#消息_忽略)

.子程序 _eventGroupMsg, 整数型, 公开, Type=2 群消息
.参数 subType, 整数型, , 子类型，目前固定为1
.参数 msgId, 整数型, , 消息ID
.参数 fromGroup, 长整数型, , 来源群号
.参数 fromAccount, 长整数型, , 来源帐号
.参数 fromAnonymous, 文本型, , 来源匿名者
.参数 msg, 文本型, , 消息内容
.参数 font, 整数型, , 字体
.局部变量 分割后文本, 文本型, , "0"
.局部变量 文本的内容, 文本型
.局部变量 文件号1, 整数型
.局部变量 有状态参数, 逻辑型
.局部变量 临时数组, 文本型, , "0"
.局部变量 o, 整数型
.局部变量 临时id数组, 数_群, , "0"
.局部变量 临时文本, 文本型
.局部变量 确认文本, 文本型, , "0"

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。

' CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “你发送了消息：” ＋ msg)

分割后文本 ＝ 分割文本 (msg, “：”, )

.如果 (分割后文本 [1] ＝ “下载提取工具”)
    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “https://github.com/1026869549/tr_data/tree/master”)
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (等待确认)
    确认文本 ＝ 分割文本 (分割后文本 [1], “ ”, )
    CQ.取群列表 (临时id数组)
    临时文本 ＝ “”
    .计次循环首 (取数组成员数 (临时id数组), o)
        .如果 (确认文本 [o] ≠ “N”)
            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ “—完成” ＋ #换行符
            CQ.发送群消息 (临时id数组 [o].群号, 待输出文本)
        .否则

            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ “—已忽略” ＋ #换行符
        .如果结束

    .计次循环尾 ()
    CQ.发送群消息 (313813526, 临时文本)
    临时文本 ＝ “”
    等待确认 ＝ 假
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (YorN)
    .如果 (分割后文本 [1] ＝ “Y”)
        CQ.取群列表 (临时id数组)
        临时文本 ＝ “”
        .计次循环首 (取数组成员数 (临时id数组), o)
            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ #换行符
        .计次循环尾 ()
        CQ.发送群消息 (313813526, 临时文本)
        临时文本 ＝ “”
        等待确认 ＝ 真
    .否则

        确认文本 ＝ 分割文本 (分割后文本 [1], “ ”, )
        CQ.取群列表 (临时id数组)
        临时文本 ＝ “”
        .计次循环首 (取数组成员数 (临时id数组), o)
            临时文本 ＝ 临时文本 ＋ 临时id数组 [o].名称 ＋ “—完成” ＋ #换行符
            CQ.发送群消息 (临时id数组 [o].群号, 待输出文本)
        .计次循环尾 ()
        CQ.发送群消息 (313813526, 临时文本)
        临时文本 ＝ “”
    .如果结束

    YorN ＝ 假
    反馈 (msg, fromAccount)
.否则

.如果结束


.如果 (分割后文本 [1] ＝ “发送”)
    CQ.发送私聊消息 (到数值 (分割后文本 [2]), 分割后文本 [3])
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “广播群文本”)
    待输出文本 ＝ 分割后文本 [2]
    CQ.发送群消息 (fromGroup, “是否人工确认？（Y/N）”)
    YorN ＝ 真
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “下载” 或 分割后文本 [1] ＝ “显示当前天数” 或 分割后文本 [1] ＝ “提取文本”)
    临时数组 ＝ 分割后文本

    删除成员 (分割后文本, 1, 取数组成员数 (分割后文本))
    加入成员 (分割后文本, “提取单词”)

    .计次循环首 (取数组成员数 (临时数组), o)
        加入成员 (分割后文本, 临时数组 [o])
    .计次循环尾 ()
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “算数” 或 分割后文本 [1] ＝ “arith” 或 分割后文本 [1] ＝ “香浓” 或 分割后文本 [1] ＝ “shannon” 或 分割后文本 [1] ＝ “哈夫曼” 或 分割后文本 [1] ＝ “huffman” 或 分割后文本 [1] ＝ “词典” 或 分割后文本 [1] ＝ “lzw”)
    临时数组 ＝ 分割后文本
    删除成员 (分割后文本, 1, 取数组成员数 (分割后文本))
    加入成员 (分割后文本, “编码计算”)

    .计次循环首 (取数组成员数 (临时数组), o)
        加入成员 (分割后文本, 临时数组 [o])
    .计次循环尾 ()
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “撤回权限” 或 分割后文本 [1] ＝ “给予权限” 或 分割后文本 [1] ＝ “输入指令” 或 分割后文本 [1] ＝ “显示消息” 或 分割后文本 [1] ＝ “显示状态”)
    临时数组 ＝ 分割后文本
    删除成员 (分割后文本, 1, 取数组成员数 (分割后文本))
    加入成员 (分割后文本, “服务器”)

    .计次循环首 (取数组成员数 (临时数组), o)
        加入成员 (分割后文本, 临时数组 [o])
    .计次循环尾 ()
    反馈 (msg, fromAccount)
.否则

.如果结束


.如果 (分割后文本 [1] ＝ “帮助”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)
        .如果 (分割后文本 [2] ＝ “服务器”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助1)
        .否则

            .如果 (分割后文本 [2] ＝ “提取单词”)
                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助2)
            .否则

                .如果 (分割后文本 [2] ＝ “编码计算”)
                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助3)
                .否则

                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助文本)
                .如果结束

            .如果结束

        .如果结束

    .否则

        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助文本)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “服务器”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)
        .如果 (分割后文本 [2] ＝ “显示状态”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 取服务器数据 (0))  ' “发送指令成功，正在等待数据返回。（默认5秒后回传数据）”
        .否则

            ' CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “发送指令成功。”)
        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “显示消息”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (到数值 (文本区分_只取数字 (分割后文本 [3])) ＞ 0 且 到数值 (文本区分_只取数字 (分割后文本 [3])) ＜ 21)
                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 取服务器数据 (1, 到数值 (文本区分_只取数字 (分割后文本 [3]))))
                .否则


                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “参数超出范围（1-20）”)
                .如果结束

            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 取服务器数据 (1))
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “输入指令”)
            .如果 (文件是否存在 (“E:\id_data\” ＋ 到文本 (fromAccount)))
                .如果 (取数组成员数 (分割后文本) ＞ 2)
                    .如果 (发送指令到服务器 (分割后文本 [3]))
                        延迟 (1000)
                        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 取服务器数据 (1, 2))
                    .否则

                        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：与服务器的连接已断开”)
                    .如果结束

                .否则

                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：你未输入指令”)
                .如果结束

            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：无操作权限”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “给予权限”)
            .如果 (fromAccount ＝ 1026869549)
                .如果 (写到文件 (“E:\id_data\” ＋ 分割后文本 [3], 到字节集 (0)))
                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 分割后文本 [3] ＋ “获得了指令权限”)
                .否则

                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：操作失败”)
                .如果结束

            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：无操作权限”)
            .如果结束

        .否则

        .如果结束


        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “撤回权限”)
            .如果 (fromAccount ＝ 1026869549)
                .如果 (删除文件 (“E:\id_data\” ＋ 分割后文本 [3]))
                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 分割后文本 [3] ＋ “失去了指令权限”)
                .否则

                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：操作失败”)
                .如果结束

            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：无操作权限”)
            .如果结束

        .否则

        .如果结束

        ' '''''''''''''''''''''''''''
        .如果 (分割后文本 [2] ≠ “撤回权限” 且 分割后文本 [2] ≠ “给予权限” 且 分割后文本 [2] ≠ “输入指令” 且 分割后文本 [2] ≠ “显示消息” 且 分割后文本 [2] ≠ “显示状态”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助1)
        .否则

        .如果结束

    .否则

        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助1)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “提取单词”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)
        .如果 (分割后文本 [2] ＝ “下载”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “https://github.com/1026869549/tr_data/blob/master/%E8%AF%8D%E5%BA%93.xlsx”)  ' “发送指令成功，正在等待数据返回。（默认5秒后回传数据）”
        .否则

            ' CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “发送指令成功。”)
        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “显示当前天数”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “当前共有 ” ＋ 取天数 () ＋ “ 个词库，分别对应张老师的外教课天数”)  ' “发送指令成功，正在等待数据返回。（默认5秒后回传数据）”
        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “提取文本”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (分割后文本 [3] ＝ “全部” 或 分割后文本 [3] ＝ “all”)
                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 提取文本 (“all”))
                .否则

                    .如果 (到数值 (文本区分_只取数字 (分割后文本 [3])) ＞ 0 且 到数值 (文本区分_只取数字 (分割后文本 [3])) ≤ 到数值 (取天数 ()))
                        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 提取文本 (文本区分_只取数字 (分割后文本 [3])))
                    .否则

                        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “参数超出范围 all 或 1-” ＋ 取天数 ())
                    .如果结束

                .如果结束

            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 提取文本 (“all”))
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ≠ “下载” 且 分割后文本 [2] ≠ “显示当前天数” 且 分割后文本 [2] ≠ “提取文本”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助2)
        .否则

        .如果结束

    .否则

        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助2)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束

.如果 (分割后文本 [1] ＝ “编码计算”)
    .如果 (取数组成员数 (分割后文本) ≥ 2)
        .如果 (分割后文本 [2] ＝ “算数” 或 分割后文本 [2] ＝ “arith”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #换行符 ＋ 算数运算 (分割后文本 [3]))
            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：缺少input字符串” ＋ #换行符 ＋ “算数或arith：[字符串]”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “香浓” 或 分割后文本 [2] ＝ “shannon”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (取数组成员数 (分割后文本) ＞ 3)
                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ 香浓运算 (分割后文本 [3], 分割后文本 [4]))
                .否则

                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：缺少[概率]” ＋ #换行符 ＋ “香浓或shannon：[字符]：[概率]”)
                .如果结束

            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：缺少[字符]” ＋ #换行符 ＋ “香浓或shannon：[字符]：[概率]”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ＝ “哈夫曼” 或 分割后文本 [2] ＝ “huffman”)
            .如果 (取数组成员数 (分割后文本) ＞ 2)
                .如果 (取数组成员数 (分割后文本) ＞ 3)
                    .如果 (取数组成员数 (分割后文本) ＞ 4)
                        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #换行符 ＋ 哈夫曼运算 (分割后文本 [3], 分割后文本 [4], 分割后文本 [5]))
                    .否则

                        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：缺少[二进制码]” ＋ #换行符 ＋ “哈夫曼或huffman：[字符]：[概率]：[二进制码]”)
                    .如果结束

                .否则

                    CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：缺少[概率]” ＋ #换行符 ＋ “哈夫曼或huffman：[字符]：[概率]：[二进制码]”)
                .如果结束


            .否则

                CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “错误：缺少[字符]” ＋ #换行符 ＋ “哈夫曼或huffman：[字符]：[概率]：[二进制码]”)
            .如果结束

        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘
        .如果 (分割后文本 [2] ＝ “词典” 或 分割后文本 [2] ＝ “lzw”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ “存在bug,暂未开放,建议下载离线工具使用https://github.com/1026869549/Coding-calculator”)
        .否则

        .如果结束

        ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
        .如果 (分割后文本 [2] ≠ “算数” 且 分割后文本 [2] ≠ “arith” 且 分割后文本 [2] ≠ “香浓” 且 分割后文本 [2] ≠ “shannon” 且 分割后文本 [2] ≠ “哈夫曼” 且 分割后文本 [2] ≠ “huffman” 且 分割后文本 [2] ≠ “词典” 且 分割后文本 [2] ≠ “lzw”)
            CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助3)
        .否则

        .如果结束

    .否则

        CQ.发送群消息 (fromGroup, CQ.CQ码_At (fromAccount) ＋ #帮助3)
    .如果结束
    反馈 (msg, fromAccount)
.否则

.如果结束





返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 反馈
.参数 内容, 文本型
.参数 发起者, 长整数型

.如果 (发起者 ≠ 1026869549)
    CQ.发送群消息 (313813526, CQ.CQ码_At (1026869549) ＋ 到文本 (发起者) ＋ “调用了机器人：” ＋ 内容)
.否则

.如果结束


.子程序 _eventDiscussMsg, 整数型, 公开, Type=4 讨论组消息
.参数 subType, 整数型, , 子类型，目前固定为1
.参数 msgId, 整数型, , 消息ID
.参数 fromDiscuss, 长整数型, , 来源讨论组
.参数 fromAccount, 长整数型, , 来源帐号
.参数 msg, 文本型, , 消息内容
.参数 font, 整数型, , 字体

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息


返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventGroupUpload, 整数型, 公开, Type=11 群文件上传事件
.参数 subType, 整数型, , 子类型，目前固定为1
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromGroup, 长整数型, , 来源群号
.参数 fromAccount, 长整数型, , 来源帐号
.参数 file, 文本型, , 上传文件信息
.局部变量 局_文件, 数_群文件

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
.如果真 (CQ.其他_转换_文本到群文件 (file, 局_文件) ＝ 假)  ' 解析群文件信息，如果失败直接忽略该消息
    返回 (#消息_忽略)
.如果真结束
' 这里处理消息


返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventSystem_GroupAdmin, 整数型, 公开, Type=101 群事件-管理员变动
.参数 subType, 整数型, , 子类型，1/被取消管理员 2/被设置管理员
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromGroup, 长整数型, , 来源群号
.参数 beingOperateAccount, 长整数型, , 被操作帐号

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息


返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventSystem_GroupMemberDecrease, 整数型, 公开, Type=102 群事件-群成员减少
.参数 subType, 整数型, , 子类型，1/群员离开 2/群员被踢
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromGroup, 长整数型, , 来源群号
.参数 fromAccount, 长整数型, , 操作者帐号(仅子类型为2时存在)
.参数 beingOperateAccount, 长整数型, , 被操作帐号

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息


返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventSystem_GroupMemberIncrease, 整数型, 公开, Type=103 群事件-群成员增加
.参数 subType, 整数型, , 子类型，1/管理员已同意 2/管理员邀请
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromGroup, 长整数型, , 来源群号
.参数 fromAccount, 长整数型, , 操作者帐号(即管理员帐号)
.参数 beingOperateAccount, 长整数型, , 被操作帐号(即加群的帐号)

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息


返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventSystem_GroupBan, 整数型, 公开, Type=104 群事件-群禁言
.参数 subType, 整数型, , 子类型，1/被解禁 2/被禁言
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromGroup, 长整数型, , 来源群号
.参数 fromAccount, 长整数型, , 操作者帐号
.参数 beingOperateAccount, 长整数型, , 被操作帐号(若为全群禁言/解禁，则本参数为 0)
.参数 duration, 长整数型, , 禁言时长(单位 秒，仅子类型为2时可用)

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息

返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventFriend_Add, 整数型, 公开, Type=201 好友事件-好友已添加
.参数 subType, 整数型, , 子类型，目前固定为1
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromAccount, 长整数型, , 来源帐号

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息
CQ.发送私聊消息 (fromAccount, CQ.CQ码_At (fromAccount) ＋ #帮助文本)

返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventRequest_AddFriend, 整数型, 公开, Type=301 请求-好友添加
.参数 subType, 整数型, , 子类型，目前固定为1
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromAccount, 长整数型, , 来源帐号
.参数 msg, 文本型, , 附言
.参数 responseFlag, 文本型, , 反馈标识(处理请求用)

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息

' CQ.置好友添加请求 (responseFlag, #请求_通过)
返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _eventRequest_AddGroup, 整数型, 公开, Type=302 请求-群添加
.参数 subType, 整数型, , 子类型，1/他人申请入群 2/自己(即登录号)受邀入群
.参数 sendTime, 整数型, , 发送时间(时间戳)
.参数 fromGroup, 长整数型, , 来源群号
.参数 fromAccount, 长整数型, , 来源帐号
.参数 msg, 文本型, , 附言
.参数 responseFlag, 文本型, , 反馈标识(处理请求用)

' 本子程序会在酷Q【线程】中被调用，请注意使用对象等需要初始化(CoInitialize,CoUninitialize)。
' 这里处理消息

.判断开始断 (subType ＝ 1)
    ' CQ.置群添加请求 (responseFlag, #请求_群添加, #请求_通过)
.' 判断 (subType ＝ 2)
    ' CQ.置群添加请求 (responseFlag, #请求_群邀请, #请求_通过)
.默认

.判断结束

返回 (#消息_忽略)  ' 关于返回值说明, 见“_eventPrivateMsg”子程序

.子程序 _menuA, 整数型, 公开

' 本子程序会在酷Q【主线程】中被调用。
信息框 (“这是menuA，在这里载入窗口，或者进行其他工作。”, 0, )
返回 (0)

.子程序 _menuB, 整数型, 公开

' 本子程序会在酷Q【主线程】中被调用。
信息框 (“这是menuB，在这里载入窗口，或者进行其他工作。”, 0, )
返回 (0)

.子程序 取服务器数据, 文本型
.参数 代号, 整数型, , 0为取服务器运行状态,服务器名,ping;1为取服务器最新n行显示内容;
.参数 附加值, 整数型, 可空
.局部变量 填表1, 普通填表
.局部变量 返回文本, 文本型
.局部变量 分割1, 文本型, , "0"
.局部变量 分割2, 文本型, , "0"
.局部变量 分割3, 文本型, , "0"
.局部变量 o, 整数型

.如果 (填表1.初始化 (功能_取句柄 ()))
    .如果 (代号 ＝ 0)
        分割1 ＝ 分割文本 (填表1.DIV_取内容 (“5”), “<p>”, )
        分割2 ＝ 分割文本 (分割1 [2], “</p>”, )
        返回文本 ＝ #换行符 ＋ “服务器名：” ＋ 分割2 [1] ＋ #换行符 ＋ “服务器状态：” ＋ 填表1.链接_取标题 (“6”) ＋ #换行符 ＋ “ping：” ＋ 到文本 (通信测试 (“d4.akkocloud.com”, 5000)) ＋ “ms”
    .否则

    .如果结束

    .如果 (代号 ＝ 1)
        .如果 (是否为空 (附加值))
            附加值 ＝ 1
        .否则

        .如果结束

        ' 分割1 ＝ 分割文本 (填表1.DIV_取内容 (附加值), “/INFO]”, )
        ' 分割2 ＝ 分割文本 (分割1 [2], “</p>”, )
        返回文本 ＝ #换行符

        .计次循环首 (附加值, o)
            分割1 ＝ 分割文本 (填表1.DIV_取内容 (到文本 (填表1.DIV_取数量 () － 18 － 附加值 ＋ o)), “/INFO] ”, )
            .如果 (分割1 [取数组成员数 (分割1)] ＝ #筛选文本1)
                分割1 [取数组成员数 (分割1)] ＝ “地上物品将在 10 后清理，请勿丢弃贵重物品在地上”
            .否则

            .如果结束

            .如果 (分割1 [取数组成员数 (分割1)] ＝ #筛选文本2)
                分割1 [取数组成员数 (分割1)] ＝ “地上物品将在 30 后清理，请勿丢弃贵重物品在地上”
            .否则

            .如果结束

            .如果 (分割1 [取数组成员数 (分割1)] ＝ #筛选文本3)
                分割1 [取数组成员数 (分割1)] ＝ “地上物品将在 60 后清理，请勿丢弃贵重物品在地上”
            .否则

            .如果结束

            分割2 ＝ 分割文本 (分割1 [取数组成员数 (分割1)], #常量1, )
            .如果 (取数组成员数 (分割2) ＞ 1)
                分割3 ＝ 分割文本 (分割2 [取数组成员数 (分割2)], “</span>”, )
                返回文本 ＝ 返回文本 ＋ 分割3 [1] ＋ #换行符 ＋ #换行符
            .否则

                返回文本 ＝ 返回文本 ＋ 分割1 [取数组成员数 (分割1)] ＋ #换行符 ＋ #换行符
            .如果结束

        .计次循环尾 ()

    .否则

    .如果结束

    填表1.销毁 ()
    返回 (返回文本)
.否则

    返回 (“错误：与服务器的连接已断开”)
.如果结束


.子程序 窗口_取句柄, 整数型, , 本子程序采用【精易编程助手】生成,成功返回窗口句柄,失败返回0
.参数 参数_父窗口句柄, 整数型, 可空, 如果是取顶级的窗口句柄请留空
.参数 参数_子窗口句柄, 整数型, 可空, 如果是取顶级的窗口句柄请留空
.参数 参数_窗口类名, 文本型, 可空, 窗口的类名
.参数 参数_窗口标题, 文本型, 可空, 窗口听标题

返回 (_查找子窗口 (参数_父窗口句柄, 参数_子窗口句柄, 参数_窗口类名, 参数_窗口标题))

.子程序 功能_取句柄, 整数型, , 本子程序采用【精易编程助手】生成,成功返回窗口句柄,失败返回0
.局部变量 局_句柄, 整数型

局_句柄 ＝ 窗口_取句柄 (, , “IEFrame”, “AkkoCloud - 查看服务器 Chiya's magic - Internet Explorer”)
.如果真 (局_句柄 ＝ 0)
    返回 (0)
.如果真结束
局_句柄 ＝ 窗口_取句柄 (局_句柄, , “Frame Tab”, )
.如果真 (局_句柄 ＝ 0)
    返回 (0)
.如果真结束
局_句柄 ＝ 窗口_取句柄 (局_句柄, , “TabWindowClass”, “AkkoCloud - 查看服务器 Chiya's magic - Internet Explorer”)
.如果真 (局_句柄 ＝ 0)
    返回 (0)
.如果真结束
局_句柄 ＝ 窗口_取句柄 (局_句柄, , “Shell DocObject View”, )
.如果真 (局_句柄 ＝ 0)
    返回 (0)
.如果真结束
局_句柄 ＝ 窗口_取句柄 (局_句柄, , “Internet Explorer_Server”, )
.如果真 (局_句柄 ＝ 0)
    返回 (0)
.如果真结束
返回 (局_句柄)

.子程序 发送指令到服务器, 逻辑型
.参数 指令文本, 文本型
.局部变量 填表2, 普通填表
.局部变量 句柄, 整数型

句柄 ＝ 功能_取句柄 ()
.如果 (填表2.初始化 (句柄))
    填表2.文本框_写内容 (“1”, 指令文本)
    填表2.文本框_置焦点 (“1”)
    PostMessageA (句柄, 256, #回车键, 0)
    PostMessageA (句柄, 257, #回车键, 0)

    填表2.销毁 ()
    返回 (真)
.否则

    返回 (假)
.如果结束


.子程序 提取文本, 文本型
.参数 天数, 文本型, , all为全部
.局部变量 o, 整数型
.局部变量 欲返回文本, 文本型

欲返回文本 ＝ “”
.如果 (天数 ＝ “all”)
    .计次循环首 (到数值 (取天数 ()), o)
        欲返回文本 ＝ 欲返回文本 ＋ 读入文本 (打开文件 (“E:\bot_data\” ＋ 到文本 (o) ＋ “.txt”, #读入, ), )
    .计次循环尾 ()

.否则

    欲返回文本 ＝ 读入文本 (打开文件 (“E:\bot_data\” ＋ 天数 ＋ “.txt”, #读入, ), )
.如果结束

返回 (欲返回文本)

.子程序 取天数, 文本型
.局部变量 o, 整数型
.局部变量 是否有, 逻辑型

是否有 ＝ 真
o ＝ 0

.判断循环首 (是否有)
    .如果 (文件是否存在 (“E:\bot_data\” ＋ 到文本 (o ＋ 1) ＋ “.txt”))
        是否有 ＝ 真
        o ＝ o ＋ 1
    .否则

        是否有 ＝ 假
    .如果结束

.判断循环尾 ()

返回 (到文本 (o))

.子程序 算数运算, 文本型
.参数 字符串, 文本型
.局部变量 o, 整数型
.局部变量 sum, 双精度小数型
.局部变量 欲写出文本, 文本型

删除成员 (输入字符列表, 1, 取数组成员数 (输入字符列表))
删除成员 (算术字符列表, 1, 取数组成员数 (算术字符列表))
删除成员 (算术计数列表, 1, 取数组成员数 (算术计数列表))
删除成员 (算术概率列表, 1, 取数组成员数 (算术概率列表))
删除成员 (上限表, 1, 取数组成员数 (上限表))
删除成员 (下限表, 1, 取数组成员数 (下限表))

.计次循环首 (取文本长度 (字符串), o)
    加入成员 (输入字符列表, 取文本中间 (字符串, o, 1))
.计次循环尾 ()

加入成员 (算术字符列表, 取文本中间 (字符串, 1, 1))
加入成员 (算术计数列表, 计算该字符个数 (算术字符列表 [1], 输入字符列表))

.计次循环首 (取数组成员数 (输入字符列表), o)
    .如果 (没有相同字符 (输入字符列表 [o], 算术字符列表) 且 o ≠ 1)
        加入成员 (算术字符列表, 取文本中间 (字符串, o, 1))
        加入成员 (算术计数列表, 计算该字符个数 (算术字符列表 [取数组成员数 (算术字符列表)], 输入字符列表))
    .否则

    .如果结束

.计次循环尾 ()

.计次循环首 (取数组成员数 (算术字符列表), o)
    加入成员 (算术概率列表, 算术计数列表 [o] ÷ 取数组成员数 (输入字符列表))
.计次循环尾 ()

.计次循环首 (取数组成员数 (算术字符列表), o)
.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
' 线段范围计算
方向 ＝ 真
sum ＝ 四舍五入 (算术概率列表 [取数组成员数 (算术字符列表)], 3)
加入成员 (上限表, sum)
加入成员 (下限表, 0)
.计次循环首 (取数组成员数 (算术字符列表) － 1, o)
    .如果 (o ＝ 取数组成员数 (算术字符列表) － 1)
        加入成员 (下限表, sum)
        加入成员 (上限表, 1)
    .否则

        加入成员 (下限表, sum)
        sum ＝ 四舍五入 (sum ＋ 算术概率列表 [取数组成员数 (算术字符列表) － o], 3)
        加入成员 (上限表, sum)
    .如果结束

.计次循环尾 ()

开始算术编码 ()
自动排序 ()

欲写出文本 ＝ “”
.计次循环首 (取数组成员数 (算术字符列表), o)
    欲写出文本 ＝ 欲写出文本 ＋ 算术字符列表 [o] ＋ “ ” ＋ 到文本 (四舍五入 (算术概率列表 [o], 6)) ＋ “ (” ＋ 到文本 (上限表 [o]) ＋ “,” ＋ 到文本 (下限表 [o]) ＋ “)” ＋ #换行符
.计次循环尾 ()
欲写出文本 ＝ 欲写出文本 ＋ #换行符
.计次循环首 (取数组成员数 (输入字符列表), o)
    欲写出文本 ＝ 欲写出文本 ＋ 输入字符列表 [o] ＋ “：” ＋ “ (” ＋ 到文本 (四舍五入 (输出上表 [o], 6)) ＋ “,” ＋ 到文本 (四舍五入 (输出下表 [o], 6)) ＋ “)” ＋ #换行符
.计次循环尾 ()

返回 (欲写出文本)


.子程序 香浓运算, 文本型
.参数 字符, 文本型
.参数 概率, 文本型
.局部变量 o, 整数型
.局部变量 临时文本数组, 文本型, , "0"

输出 ＝ “”
删除成员 (香浓字符, 1, 取数组成员数 (香浓字符))
删除成员 (香浓概率, 1, 取数组成员数 (香浓概率))
删除成员 (排序下标, 1, 取数组成员数 (排序下标))
删除成员 (概率文本, 1, 取数组成员数 (概率文本))
删除成员 (字符1, 1, 取数组成员数 (字符1))
删除成员 (字符2, 1, 取数组成员数 (字符2))
删除成员 (字符3, 1, 取数组成员数 (字符3))
删除成员 (字符4, 1, 取数组成员数 (字符4))
删除成员 (字符5, 1, 取数组成员数 (字符5))
删除成员 (字符6, 1, 取数组成员数 (字符6))
删除成员 (字符7, 1, 取数组成员数 (字符7))
删除成员 (字符8, 1, 取数组成员数 (字符8))
删除成员 (字符9, 1, 取数组成员数 (字符9))
删除成员 (字符10, 1, 取数组成员数 (字符10))
删除成员 (字符11, 1, 取数组成员数 (字符11))
删除成员 (字符12, 1, 取数组成员数 (字符12))
删除成员 (字符13, 1, 取数组成员数 (字符13))
删除成员 (字符14, 1, 取数组成员数 (字符14))
删除成员 (字符15, 1, 取数组成员数 (字符15))
删除成员 (字符16, 1, 取数组成员数 (字符16))
删除成员 (字符17, 1, 取数组成员数 (字符17))
删除成员 (字符18, 1, 取数组成员数 (字符18))
删除成员 (字符19, 1, 取数组成员数 (字符19))
删除成员 (字符20, 1, 取数组成员数 (字符20))

字符a ＝ 字符
概率a ＝ 概率
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
香浓字符 ＝ 分割文本 (字符, “,”, )
概率文本 ＝ 分割文本 (概率, “,”, )

.计次循环首 (取数组成员数 (概率文本), o)
    加入成员 (香浓概率, 到小数 (概率文本 [o]))
.计次循环尾 ()

.如果 (取数组成员数 (概率文本) ≠ 取数组成员数 (香浓字符))
    输出 ＝ “错误：字符数与概率数不相等”
.否则

    从大到小排序 (香浓概率)

    开始香浓编码 ()

    输出香浓编码 ()

.如果结束

返回 (输出)

.子程序 哈夫曼运算, 文本型
.参数 字符, 文本型
.参数 概率, 文本型
.参数 二进制码, 文本型
.局部变量 o, 整数型
.局部变量 临时文本数组, 文本型, , "0"
.局部变量 临时码长, 小数型
.局部变量 临时熵, 小数型
.局部变量 临时效率, 小数型

删除成员 (哈字符, 1, 取数组成员数 (哈字符))
删除成员 (哈代码, 1, 取数组成员数 (哈代码))
删除成员 (哈概率, 1, 取数组成员数 (哈概率))
删除成员 (哈概率文本, 1, 取数组成员数 (哈概率文本))
删除成员 (哈码长, 1, 取数组成员数 (哈码长))
删除成员 (哈平均长度, 1, 取数组成员数 (哈平均长度))
删除成员 (哈熵, 1, 取数组成员数 (哈熵))

二进制码b ＝ 二进制码
字符b ＝ 字符
概率b ＝ 概率

.计次循环首 (取文本长度 (字符b), o)
    加入成员 (临时文本数组, 取文本中间 (字符b, o, 1))
.计次循环尾 ()

' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’

哈概率文本 ＝ 分割文本 (概率b, “,”, )
.计次循环首 (取数组成员数 (哈概率文本), o)
    加入成员 (哈概率, 到小数 (哈概率文本 [o]))
.计次循环尾 ()
哈字符 ＝ 分割文本 (字符b, “,”, )
哈代码 ＝ 分割文本 (二进制码b, “,”, )
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’
临时码长 ＝ 0
临时熵 ＝ 0

.计次循环首 (取数组成员数 (哈字符), o)
    加入成员 (哈码长, 取文本长度 (哈代码 [o]))
.计次循环尾 ()

.计次循环首 (取数组成员数 (哈字符), o)
    临时熵 ＝ 临时熵 ＋ 哈概率 [o] × 求自然对数 (1 ÷ 哈概率 [o]) ÷ 求自然对数 (2)
    临时码长 ＝ 临时码长 ＋ 哈码长 [o] × 哈概率 [o]
.计次循环尾 ()

临时效率 ＝ 临时熵 ÷ 临时码长

输出b ＝ “平均码长：” ＋ 到文本 (四舍五入 (临时码长, 6)) ＋ #换行符
输出b ＝ “熵：” ＋ 输出b ＋ 到文本 (四舍五入 (临时熵, 6)) ＋ #换行符
输出b ＝ “效率：” ＋ 输出b ＋ 到文本 (四舍五入 (临时效率, 6)) ＋ “ 百分比格式：” ＋ 到文本 (100 × 四舍五入 (临时效率, 2)) ＋ “%”

返回 (输出b)


.子程序 没有相同字符, 逻辑型
.参数 目标字符, 文本型
.参数 被比较字符数组, 文本型, 数组
.局部变量 o, 整数型

.计次循环首 (取数组成员数 (被比较字符数组), o)
    .如果 (目标字符 ＝ 被比较字符数组 [o])
        返回 (假)
    .否则

    .如果结束

.计次循环尾 ()

返回 (真)

.子程序 计算该字符个数, 整数型
.参数 目标字符, 文本型
.参数 被比较字符数组, 文本型, 数组
.局部变量 o, 整数型
.局部变量 sum, 整数型

sum ＝ 0

.计次循环首 (取数组成员数 (被比较字符数组), o)
    .如果 (目标字符 ＝ 被比较字符数组 [o])
        sum ＝ sum ＋ 1
    .否则

    .如果结束

.计次循环尾 ()

返回 (sum)

.子程序 概率表重新排列
.参数 目标数组, 整数型, 数组
.局部变量 o, 整数型
.局部变量 临时数组, 整数型, , "0"

临时数组 ＝ 目标数组

.计次循环首 (取数组成员数 (目标数组), o)
    临时数组 [初始序号 [o]] ＝ 目标数组 [o]
.计次循环尾 ()

目标数组 ＝ 临时数组

.子程序 _换位_被单击
.参数 位置1, 文本型
.参数 位置2, 文本型
.局部变量 o, 文本型
.局部变量 v, 整数型
.局部变量 v1, 小数型
.局部变量 位1, 整数型
.局部变量 位2, 整数型
.局部变量 sum, 小数型

.如果 (到数值 (位置1) ≠ 到数值 (位置2))
    .如果 (到数值 (位置1) ＞ 0 且 到数值 (位置1) ≤ 取数组成员数 (算术字符列表))
        .如果 (到数值 (位置2) ＞ 0 且 到数值 (位置2) ≤ 取数组成员数 (算术字符列表))
            位1 ＝ 到数值 (位置1)
            位2 ＝ 到数值 (位置2)
            o ＝ 算术字符列表 [位1]
            算术字符列表 [位1] ＝ 算术字符列表 [位2]
            算术字符列表 [位2] ＝ o

            v ＝ 算术计数列表 [位1]
            算术计数列表 [位1] ＝ 算术计数列表 [位2]
            算术计数列表 [位2] ＝ v

            v1 ＝ 算术概率列表 [位1]
            算术概率列表 [位1] ＝ 算术概率列表 [位2]
            算术概率列表 [位2] ＝ v1
            ' ’‘’‘’‘’‘’‘’‘’
        .否则

            信息框 (“选中 位置2 时超出范围：1-” ＋ 到文本 (取数组成员数 (算术字符列表)), 0, “错误！”)
        .如果结束

    .否则

        信息框 (“选中 位置1 时超出范围：1-” ＋ 到文本 (取数组成员数 (算术字符列表)), 0, “错误！”)
    .如果结束

.否则

    信息框 (“位置1 与 位置2 选中了同一个位置！”, 0, “错误！”)
.如果结束

删除成员 (上限表, 1, 取数组成员数 (上限表))
删除成员 (下限表, 1, 取数组成员数 (下限表))

.计次循环首 (取数组成员数 (算术字符列表), v)
    算术概率列表 [v] ＝ 四舍五入 (算术概率列表 [v], 6)
.计次循环尾 ()

' 线段范围计算
方向 ＝ 真
sum ＝ 四舍五入 (算术概率列表 [取数组成员数 (算术字符列表)], 3)
加入成员 (上限表, sum)
加入成员 (下限表, 0)
.计次循环首 (取数组成员数 (算术字符列表) － 1, v)
    .如果 (v ＝ 取数组成员数 (算术字符列表) － 1)
        加入成员 (下限表, sum)
        加入成员 (上限表, 1)
    .否则

        加入成员 (下限表, sum)
        sum ＝ 四舍五入 (sum ＋ 算术概率列表 [取数组成员数 (算术字符列表) － v], 3)
        加入成员 (上限表, sum)
    .如果结束

.计次循环尾 ()

开始算术编码 ()

.子程序 开始算术编码
.局部变量 o, 整数型
.局部变量 max, 双精度小数型
.局部变量 min, 双精度小数型
.局部变量 当前长度, 双精度小数型
.局部变量 转化小数, 双精度小数型


删除成员 (输出上表, 1, 取数组成员数 (输出上表))
删除成员 (输出下表, 1, 取数组成员数 (输出下表))

max ＝ 1
min ＝ 0
.计次循环首 (取数组成员数 (输入字符列表), o)
    当前长度 ＝ 四舍五入 (max － min, 6)
    .如果 (上限表 [查序号 (o)] ＝ 1)
        加入成员 (输出上表, max)
        .如果 (下限表 [查序号 (o)] ＝ 0)
            加入成员 (输出下表, min)
        .否则

            加入成员 (输出下表, 当前长度 × 下限表 [查序号 (o)] ＋ min)
        .如果结束

    .否则

        .如果 (下限表 [查序号 (o)] ＝ 0)
            加入成员 (输出下表, min)
            加入成员 (输出上表, 当前长度 × 上限表 [查序号 (o)] ＋ min)
        .否则

            加入成员 (输出上表, 当前长度 × 上限表 [查序号 (o)] ＋ min)
            加入成员 (输出下表, 当前长度 × 下限表 [查序号 (o)] ＋ min)
        .如果结束

    .如果结束

    max ＝ 输出上表 [o]
    min ＝ 输出下表 [o]
.计次循环尾 ()


.子程序 查序号, 整数型
.参数 序号, 整数型, , 输入字符列表的序号
.局部变量 o, 整数型


.如果 (方向)
    .计次循环首 (取数组成员数 (算术字符列表), o)
        .如果 (输入字符列表 [序号] ＝ 算术字符列表 [o])
            返回 (取数组成员数 (算术字符列表) ＋ 1 － o)
        .否则

        .如果结束

    .计次循环尾 ()

    信息框 (“查表时报错！input中的字符 ” ＋ 到文本 (输入字符列表 [序号]) ＋ “ 不在字符表中！”, 0, “错误！”)
    返回 (1)

.否则

    .计次循环首 (取数组成员数 (算术字符列表), o)
        .如果 (输入字符列表 [序号] ＝ 算术字符列表 [o])
            返回 (o)
        .否则

        .如果结束

    .计次循环尾 ()

    信息框 (“查表时报错！input中的字符 ” ＋ 到文本 (输入字符列表 [序号]) ＋ “ 不在字符表中！”, 0, “错误！”)
    返回 (1)

.如果结束








.子程序 自动排序
.局部变量 a, 整数型
.局部变量 b, 整数型

.计次循环首 (取数组成员数 (算术字符列表), a)
    .计次循环首 (取数组成员数 (算术字符列表) － a, b)
        .如果 (取代码 (算术字符列表 [a], ) ＞ 取代码 (算术字符列表 [a ＋ b], ))
            _换位_被单击 (到文本 (a), 到文本 (a ＋ b))
        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()





.子程序 从大到小排序
.参数 目标数组, 小数型, 数组
.局部变量 o, 整数型
.局部变量 v, 整数型
.局部变量 t1, 整数型
.局部变量 t2, 小数型
.局部变量 t3, 文本型
.局部变量 临时文本, 文本型, , "0"

.计次循环首 (取数组成员数 (目标数组), o)
    加入成员 (排序下标, o)
.计次循环尾 ()

.计次循环首 (取数组成员数 (目标数组), o)
    .计次循环首 (取数组成员数 (目标数组) － o, v)
        .如果 (目标数组 [o] ＜ 目标数组 [o ＋ v])
            t1 ＝ 排序下标 [o]
            排序下标 [o] ＝ 排序下标 [o ＋ v]
            排序下标 [o ＋ v] ＝ t1
            ' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’
            t2 ＝ 目标数组 [o]
            目标数组 [o] ＝ 目标数组 [o ＋ v]
            目标数组 [o ＋ v] ＝ t2
        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()

' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’排序文本
临时文本 ＝ 香浓字符
.计次循环首 (取数组成员数 (排序下标), o)
    临时文本 [o] ＝ 香浓字符 [排序下标 [o]]
.计次循环尾 ()
香浓字符 ＝ 临时文本

' ’‘’‘’‘’‘’‘’‘’输出
.计次循环首 (取数组成员数 (目标数组), o)
    .如果 (o ＝ 取数组成员数 (目标数组))
        字符a ＝ 字符a ＋ 香浓字符 [o]
        概率a ＝ 概率a ＋ 到文本 (香浓概率 [o])
    .否则

        字符a ＝ 字符a ＋ 香浓字符 [o] ＋ “,”
        概率a ＝ 概率a ＋ 到文本 (香浓概率 [o]) ＋ “,”
    .如果结束

.计次循环尾 ()


.子程序 开始香浓编码
.局部变量 o, 整数型
.局部变量 sum, 小数型
.局部变量 概率和, 小数型
.局部变量 分界点, 整数型
.局部变量 左侧名, 文本型, , "0"
.局部变量 右侧名, 文本型, , "0"
.局部变量 左侧概率, 小数型, , "0"
.局部变量 右侧概率, 小数型, , "0"

概率和 ＝ 1
sum ＝ 0
.计次循环首 (取数组成员数 (香浓概率), o)
    sum ＝ sum ＋ 香浓概率 [o]
    .如果 (sum ≤ 0.5)
        分界点 ＝ o
    .否则

    .如果结束

.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’分割数组完成

.计次循环首 (取数组成员数 (香浓概率), o)
    .如果 (o ≤ 分界点)
        加入成员 (左侧名, 香浓字符 [o])
        加入成员 (左侧概率, 香浓概率 [o])
    .否则

        加入成员 (右侧名, 香浓字符 [o])
        加入成员 (右侧概率, 香浓概率 [o])
    .如果结束

.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’分配左右侧完成

.计次循环首 (取数组成员数 (左侧名), o)
    写入香浓输出数组 (左侧名 [o], 0)
.计次循环尾 ()

.计次循环首 (取数组成员数 (右侧名), o)
    写入香浓输出数组 (右侧名 [o], 1)
.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’数据写入完成

.如果 (取数组成员数 (左侧名) ＞ 1)
    嵌套香浓编码 (左侧名, 左侧概率)
.否则

.如果结束

.如果 (取数组成员数 (右侧名) ＞ 1)
    嵌套香浓编码 (右侧名, 右侧概率)
.否则

.如果结束
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’嵌套完成



.子程序 写入香浓输出数组
.参数 字符串, 文本型, , 用来对比写入哪个数组
.参数 数据, 整数型, , 0或1
.局部变量 o, 整数型
.局部变量 v, 整数型

v ＝ 0
.计次循环首 (取数组成员数 (香浓字符), o)
    .如果 (字符串 ＝ 香浓字符 [o])
        v ＝ o
    .否则

    .如果结束

.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’判断角标完成
.如果 (v ＝ 0)
    信息框 (“编码时，没有在字符表中找到需要的字符串！”, 0, “错误！”)
.否则

.如果结束

.如果 (v ＝ 1)
    加入成员 (字符1, 数据)
.否则

.如果结束

.如果 (v ＝ 2)
    加入成员 (字符2, 数据)
.否则

.如果结束

.如果 (v ＝ 3)
    加入成员 (字符3, 数据)
.否则

.如果结束

.如果 (v ＝ 4)
    加入成员 (字符4, 数据)
.否则

.如果结束

.如果 (v ＝ 5)
    加入成员 (字符5, 数据)
.否则

.如果结束

.如果 (v ＝ 6)
    加入成员 (字符6, 数据)
.否则

.如果结束

.如果 (v ＝ 7)
    加入成员 (字符7, 数据)
.否则

.如果结束

.如果 (v ＝ 8)
    加入成员 (字符8, 数据)
.否则

.如果结束

.如果 (v ＝ 9)
    加入成员 (字符9, 数据)
.否则

.如果结束

.如果 (v ＝ 10)
    加入成员 (字符10, 数据)
.否则

.如果结束

.如果 (v ＝ 11)
    加入成员 (字符11, 数据)
.否则

.如果结束

.如果 (v ＝ 12)
    加入成员 (字符12, 数据)
.否则

.如果结束

.如果 (v ＝ 13)
    加入成员 (字符13, 数据)
.否则

.如果结束

.如果 (v ＝ 14)
    加入成员 (字符14, 数据)
.否则

.如果结束

.如果 (v ＝ 15)
    加入成员 (字符15, 数据)
.否则

.如果结束

.如果 (v ＝ 16)
    加入成员 (字符16, 数据)
.否则

.如果结束

.如果 (v ＝ 17)
    加入成员 (字符17, 数据)
.否则

.如果结束

.如果 (v ＝ 18)
    加入成员 (字符18, 数据)
.否则

.如果结束

.如果 (v ＝ 19)
    加入成员 (字符19, 数据)
.否则

.如果结束

.如果 (v ＝ 20)
    加入成员 (字符20, 数据)
.否则

.如果结束

.如果 (v ＞ 20)
    输出 ＝ 输出 ＋ “编码时，字符数超出范围！数据丢失！” ＋ #换行符
.否则

.如果结束


.子程序 输出香浓编码

输出 ＝ #换行符 ＋ 输出 ＋ “开始输出：” ＋ #换行符 ＋ #换行符
.如果 (取数组成员数 (字符1) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [1] ＋ “ = ” ＋ 取香浓文本 (1) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符2) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [2] ＋ “ = ” ＋ 取香浓文本 (2) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符3) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [3] ＋ “ = ” ＋ 取香浓文本 (3) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符4) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [4] ＋ “ = ” ＋ 取香浓文本 (4) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符5) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [5] ＋ “ = ” ＋ 取香浓文本 (5) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符6) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [6] ＋ “ = ” ＋ 取香浓文本 (6) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符7) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [7] ＋ “ = ” ＋ 取香浓文本 (7) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符8) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [8] ＋ “ = ” ＋ 取香浓文本 (8) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符9) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [9] ＋ “ = ” ＋ 取香浓文本 (9) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符10) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [10] ＋ “ = ” ＋ 取香浓文本 (10) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符11) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [11] ＋ “ = ” ＋ 取香浓文本 (11) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符12) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [12] ＋ “ = ” ＋ 取香浓文本 (12) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符13) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [13] ＋ “ = ” ＋ 取香浓文本 (13) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符14) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [14] ＋ “ = ” ＋ 取香浓文本 (14) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符15) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [15] ＋ “ = ” ＋ 取香浓文本 (15) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符16) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [16] ＋ “ = ” ＋ 取香浓文本 (16) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符17) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [17] ＋ “ = ” ＋ 取香浓文本 (17) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符18) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [18] ＋ “ = ” ＋ 取香浓文本 (18) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符19) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [19] ＋ “ = ” ＋ 取香浓文本 (19) ＋ #换行符
.否则

.如果结束

.如果 (取数组成员数 (字符20) ＞ 0)
    输出 ＝ 输出 ＋ 香浓字符 [20] ＋ “ = ” ＋ 取香浓文本 (20) ＋ #换行符
.否则

.如果结束


.子程序 取香浓文本, 文本型
.参数 角标, 整数型
.局部变量 临时文本, 文本型
.局部变量 o, 整数型

临时文本 ＝ “”

.如果 (角标 ＝ 1)
    .计次循环首 (取数组成员数 (字符1), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符1 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 2)
    .计次循环首 (取数组成员数 (字符2), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符2 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 3)
    .计次循环首 (取数组成员数 (字符3), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符3 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 4)
    .计次循环首 (取数组成员数 (字符4), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符4 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 5)
    .计次循环首 (取数组成员数 (字符5), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符5 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 6)
    .计次循环首 (取数组成员数 (字符6), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符6 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 7)
    .计次循环首 (取数组成员数 (字符7), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符7 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 8)
    .计次循环首 (取数组成员数 (字符8), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符8 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 9)
    .计次循环首 (取数组成员数 (字符9), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符9 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 10)
    .计次循环首 (取数组成员数 (字符10), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符10 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 11)
    .计次循环首 (取数组成员数 (字符11), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符11 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 12)
    .计次循环首 (取数组成员数 (字符12), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符12 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 13)
    .计次循环首 (取数组成员数 (字符13), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符13 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 14)
    .计次循环首 (取数组成员数 (字符14), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符14 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 15)
    .计次循环首 (取数组成员数 (字符15), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符15 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 16)
    .计次循环首 (取数组成员数 (字符16), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符16 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 17)
    .计次循环首 (取数组成员数 (字符17), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符17 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 18)
    .计次循环首 (取数组成员数 (字符18), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符18 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 19)
    .计次循环首 (取数组成员数 (字符19), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符19 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

.如果 (角标 ＝ 20)
    .计次循环首 (取数组成员数 (字符20), o)
        临时文本 ＝ 临时文本 ＋ 到文本 (字符20 [o])
        .如果 (o ％ 4 ＝ 0)
            临时文本 ＝ 临时文本 ＋ “ ”
        .否则

        .如果结束

    .计次循环尾 ()

.否则

.如果结束

返回 (临时文本)

.子程序 嵌套香浓编码
.参数 数组名, 文本型, 可空 数组
.参数 概率分布, 小数型, 可空 数组
.局部变量 o, 整数型
.局部变量 sum, 小数型
.局部变量 概率和, 小数型
.局部变量 分界点, 整数型
.局部变量 左侧名, 文本型, , "0"
.局部变量 右侧名, 文本型, , "0"
.局部变量 左侧概率, 小数型, , "0"
.局部变量 右侧概率, 小数型, , "0"

概率和 ＝ 0
.计次循环首 (取数组成员数 (概率分布), o)
    概率和 ＝ 概率和 ＋ 概率分布 [o]
.计次循环尾 ()
sum ＝ 0
.计次循环首 (取数组成员数 (概率分布), o)
    sum ＝ sum ＋ 概率分布 [o]
    .如果 (取数组成员数 (概率分布) ≤ 2)
        分界点 ＝ 1
    .否则

        .如果 (sum ≤ 概率和 ÷ 2)
            分界点 ＝ o
        .否则

        .如果结束

    .如果结束

.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’分割数组完成

.计次循环首 (取数组成员数 (概率分布), o)
    .如果 (o ≤ 分界点)
        加入成员 (左侧名, 数组名 [o])
        加入成员 (左侧概率, 概率分布 [o])
    .否则

        加入成员 (右侧名, 数组名 [o])
        加入成员 (右侧概率, 概率分布 [o])
    .如果结束

.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’分配左右侧完成

.计次循环首 (取数组成员数 (左侧名), o)
    写入香浓输出数组 (左侧名 [o], 0)
.计次循环尾 ()

.计次循环首 (取数组成员数 (右侧名), o)
    写入香浓输出数组 (右侧名 [o], 1)
.计次循环尾 ()
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’数据写入完成

.如果 (取数组成员数 (左侧名) ＞ 1)
    嵌套香浓编码 (左侧名, 左侧概率)
.否则

.如果结束

.如果 (取数组成员数 (右侧名) ＞ 1)
    嵌套香浓编码 (右侧名, 右侧概率)
.否则

.如果结束
' ’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’‘’嵌套完成



